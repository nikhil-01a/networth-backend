spring.application.name=networth-backend

###### MS SQL SERVER DATABASE CONNECTION PROPERTIES ######
spring.datasource.url=jdbc:sqlserver://;serverName=localhost;databaseName=master;encrypt=true;trustServerCertificate=true;
spring.datasource.username=sa
spring.datasource.password=${DB_PASS}
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
## Setting trustServerCertificate=true allows the application to bypass certificate validation. However, this is not recommended for production environments due to security risks.
## FOR PRODUCTION: Import the SSL Certificate into Java Trust Store
## 1. Obtain the SSL Certificate:
### You can obtain the certificate from the SQL Server. You might do this by connecting to the SQL Server from a browser and downloading the certificate, or using openssl to retrieve it from the server.
## 2. Import the Certificate:
### keytool -import -alias sqlserver-cert -file <path-to-certificate> -keystore <path-to-java-home>/lib/security/cacerts
## 3. Restart Your Application:
### After importing the certificate, restart your Spring Boot application. The application should now be able to establish a secure connection to the SQL Server using the provided certificate.

#### JPA SETTINGS ####
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.open-in-view=true
